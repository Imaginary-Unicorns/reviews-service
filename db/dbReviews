const mongoose = require('mongoose');
main().catch(err => console.log(err));
async function main() {
  await mongoose.connect('mongodb://localhost:27017/reviews');
};
const fs = require('fs');
const parse = require('csv-parser')
// import { csvToDB } from 'csvToDB';

// id,product_id,rating,date,summary,body,recommend,reported,reviewer_name,reviewer_email,response,helpfulness

const reviewSchema = new mongoose.Schema({
  review_id: Number,
  product_id: Number,
  summary: String,
  recommend: Boolean,
  response: String,
  body: String,
  date: Date,
  reviewer_name: String,
  reviewer_email: String,
  helpfulness: Number,
  reported: Boolean
})

// const photoSchema = new mongoose.Schema({
//   review_id: Number,
//   url: String
// })

// const characteristicsSchema = new mongoose.Schema({
//   review_id: Number,
//   rating: Number,
//   size: Number,
//   width: Number,
//   comfort: Number,
//   quality: Number,
//   length: Number,
//   fit: Number
// })

const Reviews = mongoose.model('Reviews', reviewSchema);
// const Characteristics = mongoose.model('Characteristics', characteristicsSchema);
// const Photos = mongoose.model('Photos', photoSchema);

const csvToDB = (str, delimiter = ',') => {
  const headers = str.slice(0, str.indexOf('\n')).split(delimiter);
  const rows = str.slice(str.indexOf('\n') + 1).split('\n');

  const arr = rows.map(row => {
    const values = row.split(delimiter);
    const el = headers.reduce((obj, header, index) => {
      obj[header] = values[index];
      return obj;
    }, {});
    return el;
  });
  return arr;
}

let readStream = fs.createReadStream('reviews/reviews-11.csv');
// let photos = fs.createReadStream('testphotos.csv');
// let characteristics = fs.createReadStream('testChars.csv');
// let characteristicReviews = fs.createReadStream('testCharRevs.csv');
let count = 0;
// let photoArray = [];

    // UPDATE TO ADD PHOTOS
// photos.pipe(parse({delimiter: ','})).on('data', fileData => {
//   // console.log(data);
//   if (data.id === fileData.review_id) {
//     console.log('match data', data.id, 'match filedata', fileData.url);
//     photoArray.push(fileData.url)
//   }
// })

readStream.pipe(parse({delimiter: ','})).on('data', data => {
  // console.log(data);
  let newReview = new Reviews({
    product_id: data.product_id,
    review_id: count,
    summary: data.summary,
    recommend: data.recommend,
    response: data.response,
    body: data.body,
    date: data.date,
    reviewer_name: data.reviewer_name,
    reviewer_email: data.reviewer_email,
    helpfulness: data.helpfulness,
    reported: data.reported
  })
  console.log(count);
  count++;
  newReview.save();
  // const result = csvToDB(data);
  // console.log(result);
})

      // UPDATE AFTER LOAD COMPLETES
/*
characteristics.pipe(parse({delimiter: ','})).on('data', data => {
  characteristicReviews.pipe(parse({delimiter: ','})).on('data', fileData => {
    if (data.id === fileData.characteristic_id) {
      console.log(data.name)
      const filter = { 'product_id': data.product_id };
      if (data.name === 'Size') {
        const update = { '$set': { 'characteristics': { 'size': fileData.value } }};
        const options = { returnNewDocument: true };
        Reviews.findOne(filter)
        .then(data => {
          console.log(data);
          data.characteristics.size = fileData.value;
          data.save();
        });
      }
      if (data.name === 'Width') {
        const update = { '$set': { 'characteristics': { 'width': fileData.value } }};
        const options = { returnNewDocument: true };
        Reviews.findOne(filter)
        .then(data => {
          console.log(data);
          data.characteristics.width = fileData.value;
          data.save();
        });
      }
      if (data.name === 'Comfort') {
        const update = { '$set': { 'characteristics': { 'comfort': fileData.value } }};
        const options = { returnNewDocument: true };
        Reviews.findOne(filter)
        .then(data => {
          console.log(data);
          data.characteristics.comfort = fileData.value;
          data.save();
        });
      }
      if (data.name === 'Quality') {
        const update = { '$set': { 'characteristics': { 'quality': fileData.value } }};
        const options = { returnNewDocument: true };
        Reviews.findOne(filter)
        .then(data => {
          console.log(data);
          data.characteristics.quality = fileData.value;
          data.save();
        });
      }
      if (data.name === 'Length') {
        const update = { '$set': { 'characteristics': { 'length': fileData.value } }};
        const options = { returnNewDocument: true };
        Reviews.findOne(filter)
        .then(data => {
          console.log(data);
          data.characteristics.length = fileData.value;
          data.save();
        });
      }
      if (data.name === 'Fit') {
        const update = { '$set': { 'characteristics': { 'fit': fileData.value } }};
        const options = { returnNewDocument: true };
        Reviews.findOne(filter)
        .then(data => {
          console.log(data);
          data.characteristics.fit = fileData.value;
          data.save();
        });
      }
    }
  });
})
*/








/*
let array = [];
characteristics.pipe(parse({delimiter: ','})).on('data', data => {
  characteristicReviews.pipe(parse({delimiter: ','})).on('data', fileData => {
    if (data.id === fileData.characteristic_id) {
      console.log('match,', data, fileData);
      let newChar = new Characteristics({
        product_id: data.product_id,
        review_id: fileData.review_id,
        name: data.name,
        value: fileData.value
      })
      newChar.save();
    }
  });
})
*/

// fs.readFile('reviews.csv', 'utf8', async (err, data) => {
//   if (err) {
//     return err;
//   } else {
//     const result = csvToDB(data);
//     result.map((res, i) => {
//       res.review_id = i + 1;
//       res.characteristics = { id: i };
//       // console.log('res review id', res.review_id);
//       // Reviews.create({review_id: i, res}, (err)=>{ if (err) { return err; }});
//       fs.readFile('reviews_photos.csv', 'utf8', async (err, data) => {
//         if (err) {
//           return err;
//         } else {
//           const result = csvToDB(data);
//           result.map(async (result, i) => {
//             // console.log(res.review_id.toString(), result.review_id.toString(), result.url)
//             if (res.review_id.toString() === result.review_id.toString()) {
//               if (res.photos) {
//                 res.photos.push(result.url)
//               } else {
//                 res.photos = [result.url];
//               }
//               Reviews.create(res, (err)=>{ if (err) { return err; }});
//             }
//             Reviews.create(res, (err)=>{ if (err) { return err; }});
//             console.log(res.url)
//             // console.log(res.review_id)
//             // Reviews.update({review_id: res.review_id}, {$push: {photos: res.url}});
//           })
//           return;
//         }
//       })
//     })
//   }
// })

// fs.readFile('testChars.csv', 'utf8', async (err, data) => {

// });




// fs.readFile('testChars.csv', 'utf8', async (err, contents) => {
//   let charname;
//   let charval;
//   let query;
//   let update;
//   let options;
//   if (err) {
//     return console.log(err);
//   } else {
//     const characteristics = csvToDB(contents);
//     fs.readFile('testCharRevs.csv', 'utf8', (err, fileData) => {
//       if (err) {
//         return err;
//       } else {
//         const charRevs = csvToDB(fileData);
//         characteristics.map(characteristic => {
//           charRevs.map(async (charRev) => {
//             if (characteristic.id.toString() === charRev.characteristic_id.toString() && charRev.review_id.toString()) {
//               // console.log(charRev.review_id.toString(), res.review_id.toString());
//                 // res.characteristics[characteristic.name] = charRev.value;
//                 console.log('rev rev id', charRev.review_id, characteristic.name, charRev.value);
//                 charname = characteristic.name;
//                 charval = charRev.value
//                 query = { "review_id" : 1 };
//                 update = {
//                           "$set": { characteristics: {'charname': charval} }
//                       };
//                 options = { "multi": true };
//                 console.log('test', query, update, options, charname, charval);
//                 Reviews.update(query, update, options, function (err) {
//                   if (err) return console.error(err);
//                 })
//               }
//             })
//           })
//         }
//       })
//     }

// })